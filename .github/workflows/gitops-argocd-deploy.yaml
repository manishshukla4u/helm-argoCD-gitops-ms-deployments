name: GitOps Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - test

jobs:
  build-and-push-images:
    if: github.event.head_commit.author.name != 'GitOps Bot'
    runs-on: ubuntu-latest
    env:
      VERSION: v1.0.${{ github.run_number }}
      DOCKER_NAMESPACE: manishshukla
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name:  Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push frontend image
        run: |
          docker build -t $DOCKER_NAMESPACE/frontend:$VERSION ./helm-charts/frontend
          docker push $DOCKER_NAMESPACE/frontend:$VERSION

      - name: Build and push backend image
        run: |
          docker build -t $DOCKER_NAMESPACE/backend:$VERSION ./helm-charts/backend
          docker push $DOCKER_NAMESPACE/backend:$VERSION

      - name: Build and push mongodb image
        run: |
          docker build -t $DOCKER_NAMESPACE/mongodb:$VERSION ./helm-charts/mongodb
          docker push $DOCKER_NAMESPACE/mongodb:$VERSION

  update-values:
    if: github.event.head_commit.author.name != 'GitOps Bot'
    runs-on: ubuntu-latest
    needs: build-and-push-images
    env:
      VERSION: v1.0.${{ github.run_number }}
      DOCKER_NAMESPACE: manishshukla
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Determine environment and update values.yaml
        run: |
            if [[ "${{ github.ref_name }}" == "main" ]]; then
              VALUES_FILE="values/prod/values.yaml"
            else
              VALUES_FILE="values/dev/values.yaml"
            fi

            yq -i '.frontend.image = "'"${DOCKER_NAMESPACE}/frontend:${VERSION}"'"' $VALUES_FILE
            yq -i '.backend.image = "'"${DOCKER_NAMESPACE}/backend:${VERSION}"'"' $VALUES_FILE
            yq -i '.mongodb.image = "'"${DOCKER_NAMESPACE}/mongodb:${VERSION}"'"' $VALUES_FILE

      - name: Commit and push changes
        run: |
          git config user.name "GitOps Bot"
          git config user.email "gitops@example.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Update image tags to $VERSION"
            git push origin HEAD:${{ github.ref_name }}
          else
            echo "No changes to commit."
          fi

  register-root-app:
    if: github.event.head_commit.author.name != 'GitOps Bot'
    runs-on: ubuntu-latest
    needs: update-values
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Configure Kubeconfig
        run: |
          kubectl config set-cluster aks-cluster \
            --server=${K8S_SERVER} \
            --insecure-skip-tls-verify=true
          kubectl config set-credentials gitops-user \
            --token=${K8S_TOKEN}
          kubectl config set-context gitops-context \
            --cluster=aks-cluster \
            --user=gitops-user
          kubectl config use-context gitops-context
        env:
          K8S_SERVER: ${{ secrets.K8S_SERVER }}
          K8S_TOKEN: ${{ secrets.K8S_TOKEN }}        #This is the bearer token used to authenticate with the cluster

      - name: Apply Root Argo CD Application
        run: |
          kubectl apply -n argocd -f argo-apps/root-app.yaml

